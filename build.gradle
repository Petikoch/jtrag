plugins {
    id "com.jfrog.bintray" version '1.0'            // https://github.com/bintray/gradle-bintray-plugin
    id 'nu.studer.credentials' version '1.0.1'      // https://github.com/etiennestuder/gradle-credentials-plugin
    id 'com.github.kt3k.coveralls' version '2.0.1'  // https://github.com/kt3k/coveralls-gradle-plugin
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
// "incubating"
apply plugin: 'jacoco'

version = '1.0.4-SNAPSHOT'

ext.artifactGroupId = 'ch.petikoch.libs'
ext.description = 'A little java 7+ library (on top of jtwfg) using a "task resource assignment graph" model to detect deadlocks'

sourceCompatibility = 1.7
targetCompatibility = 1.7

ext.fileEncoding = 'UTF-8'

repositories {
    jcenter()
}

dependencies {
    compile 'ch.petikoch.libs:jtwfg:1.0.3'

    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.0', classifier: 'indy'
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile 'cglib:cglib-nodep:3.1' // spock mocks
    testCompile 'com.google.guava:guava:18.0' // provides e.g. nice Multimap
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
}

test {
    systemProperty 'file.encoding', project.fileEncoding
}

sourceSets.main.java.srcDirs = ['src/main/java']
sourceSets.test.java.srcDirs = []
sourceSets.main.groovy.srcDirs = []
sourceSets.test.groovy.srcDirs = ['src/test/groovy']

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

tasks.withType(GroovyCompile) {
    groovyOptions.encoding = project.fileEncoding
    options.encoding = project.fileEncoding
}

tasks.withType(JavaCompile) {
    options.encoding = project.fileEncoding
}

// http://forums.gradle.org/gradle/topics/set_maxparallelforks_to_number_of_cores_on_the_current_machine
tasks.withType(Test) {
    maxParallelForks = Runtime.getRuntime().availableProcessors()
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

def pomConfig = {
    name project.name
    description project.description
    url 'https://github.com/Petikoch/jtrag'
    inceptionYear '2015'

    scm { url 'https://github.com/Petikoch/jtrag.git' }

    developers {
        developer {
            id 'petikoch'
            name 'Peti Koch'
            email 'petikoch@gmail.com'
            url 'https://www.google.com/+PetiKoch'
        }
    }

/*    contributors {
        contributor {
            name 'John Doe'
        }
    }*/

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            groupId project.artifactGroupId
            artifactId project.name
            version project.version
            from components.java

            pom.withXml {
                def node = asNode()
                node.children().last() + pomConfig

                // ugly dirty hack... build up the test dependencies ourselve
                // why? because maven-publish plugin creates crapy dependencies in pom.xml (gradle 2.2)
                // see http://stackoverflow.com/questions/20131915/publishing-artifact-from-gradle-project-to-bintray-maven-repository
                // solution: http://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml

                node.remove(node.dependencies)

                def dependenciesNode = node.appendNode('dependencies')
                configurations.testCompile.allDependencies.each {
                    if (it.name != 'jtwfg') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        if (it.version == '+') {
                            dependencyNode.appendNode('version', 'RELEASE')
                        } else {
                            dependencyNode.appendNode('version', it.version)
                        }
                        dependencyNode.appendNode('scope', 'test')
                        if (it.name == 'groovy-all') {
                            dependencyNode.appendNode('classifier', 'indy')
                        }
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        if (it.version == '+') {
                            dependencyNode.appendNode('version', 'RELEASE')
                        } else {
                            dependencyNode.appendNode('version', it.version)
                        }
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }

                return node
            }

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenCustomPublication {
        destination = file("$buildDir/generated_pom.xml")
    }
}

bintray {
    user = credentials.bintrayUserName       // https://github.com/etiennestuder/gradle-credentials-plugin
    key = credentials.bintrayApiKey          // https://github.com/etiennestuder/gradle-credentials-plugin
    publications = ['mavenCustom']   // see publications closure

    publish true

    pkg {
        repo = 'maven'
        name = project.name
        desc = project.description // doesn't work
        websiteUrl = 'https://github.com/Petikoch/jtrag'
        issueTrackerUrl = 'https://github.com/Petikoch/jtrag/issues'
        vcsUrl = 'https://github.com/Petikoch/jtrag.git'
        licenses = ['Apache-2.0']
        labels = ['java']
        publicDownloadNumbers = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}
